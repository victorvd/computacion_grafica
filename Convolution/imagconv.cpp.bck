//Convolucion
#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;

int main()
{
	vectwod image = {
	{1,0,2,3,4,5,6,7,8,9},
	{1,2,3,4,5,6,7,8,9,8},
	{2,3,4,5,6,7,8,9,1,7},
	{3,4,5,6,7,8,9,1,2,6},
	{4,5,6,7,8,9,1,2,3,5},
	{5,6,7,8,9,1,2,3,4,4},
	{6,7,8,9,1,2,3,4,5,3},
	{7,8,9,1,2,3,4,5,6,2},
	{8,9,1,2,3,4,5,6,7,1},
	{9,1,2,3,4,5,6,7,0,8},

	};

	vectwod kernel = {
	{0,1,2,3,4},
	{1,2,3,4,5},
	{2,3,4,5,6},
	{3,4,5,6,7},
	{4,5,6,7,8},
	
	};
	
	
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	
	int newImageHeight = imgHeight - kernelHeight + 1;
	int newImageWidth = imgWidth - kernelWidth + 1;
	int sum;

	vectwod newImage(newImageHeight, vector<int>(newImageWidth));

	//Bucle para convoluci√≥n---------------------------------------------------------------------
	for (int i=0 ; i<newImageHeight ; ++i) {
		for (int j=0 ; j<newImageWidth ; ++j) {
			sum = 0;
			for (int h=i ; h<i+kernelHeight ; ++h) {
				for (int w=j ; w<j+kernelWidth ; ++w) {
					sum += kernel[h-i][w-j]*image[h][w];
				}
			}
			newImage[i][j] = sum;
		}
	}
	
	for (int i=0 ; i<newImageHeight ; ++i) {
			for (int j=0 ; j<newImageWidth ; ++j) {
				cout<< newImage[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}




//Padding

#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;

int main()
{
	vectwod image = {
	{1,0,2,3,4,5,6,7,8,9},
	{1,2,3,4,5,6,7,8,9,8},
	{2,3,4,5,6,7,8,9,1,7},
	{3,4,5,6,7,8,9,1,2,6},
	{4,5,6,7,8,9,1,2,3,5},
	{5,6,7,8,9,1,2,3,4,4},
	{6,7,8,9,1,2,3,4,5,3},
	{7,8,9,1,2,3,4,5,6,2},
	{8,9,1,2,3,4,5,6,7,1},
	{9,1,2,3,4,5,6,7,0,8},

	};

	vectwod kernel = {
	{0,1,2,3,4},
	{1,2,3,4,5},
	{2,3,4,5,6},
	{3,4,5,6,7},
	{4,5,6,7,8},
	
	};
	
	
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vectwod imgPad(newHeight, vector<int>(newWidth));
	

	for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j] = image[i-kCenterY][j-kCenterX];
		}
	}
	
	for (int r=1 ; r<=kCenterY ; ++r) {
	
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[kCenterY-r][j] = imgPad[kCenterY-r+1][j];
				imgPad[imgHeight+kCenterY+r-1][j] = imgPad[imgHeight+kCenterY+r-2][j];
			}

			for (int i=0 ; i<newHeight ; ++i) {
				imgPad[i][kCenterX-r] = imgPad[i][kCenterX-r+1];
				imgPad[i][imgWidth+kCenterX+r-1] = imgPad[i][imgWidth+kCenterX+r-2];
			}
		
			/*for (int j=0 ; j<imgWidth+kCenterX ; ++j) {
				imgPad[kCenterY-1][j] = imgPad[kCenterY][j];
			}
			for (int j=0 ; j<imgWidth+kCenterX ; ++j) {
				imgPad[imgHeight+kCenterY][j] = imgPad[imgHeight+kCenterY-1][j];
			}
			for (int i=0 ; i<imgHeight+kCenterY+1 ; ++i) {
				imgPad[i][kCenterX-1] = imgPad[i][kCenterX];
			}
			for (int i=0 ; i<imgHeight+kCenterY+1 ; ++i) {
				imgPad[i][imgWidth+kCenterX] = imgPad[i][imgWidth+kCenterX-1];
			}
			
				for (int j=0 ; j<imgWidth+kCenterX*2 ; ++j) {
					imgPad[kCenterY-1-1][j] = imgPad[kCenterY-1][j];
				}
				for (int j=0 ; j<imgWidth+kCenterX*2 ; ++j) {
					imgPad[imgHeight+kCenterY+1][j] = imgPad[imgHeight+kCenterY-1+1][j];
				}
				for (int i=0 ; i<imgHeight+kCenterY+1 ; ++i) {
					imgPad[i][kCenterX-1-1] = imgPad[i][kCenterX-1];
				}
				for (int i=0 ; i<imgHeight+kCenterY+1 ; ++i) {
					imgPad[i][imgWidth+kCenterX+1] = imgPad[i][imgWidth+kCenterX-1+1];
				}
			*/
		
	}
	
	for (int i=0 ; i<newHeight ; ++i) {
			for (int j=0 ; j<newWidth ; ++j) {
				cout<< imgPad[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}



#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;

int main()
{
	vectwod image = {
	{1,0,2,3,4,5,6,7,8,9},
	{1,2,3,4,5,6,7,8,9,8},
	{2,3,4,5,6,7,8,9,1,7},
	{3,4,5,6,7,8,9,1,2,6},
	{4,5,6,7,8,9,1,2,3,5},
	{5,6,7,8,9,1,2,3,4,4},
	{6,7,8,9,1,2,3,4,5,3},
	{7,8,9,1,2,3,4,5,6,2},
	{8,9,1,2,3,4,5,6,7,1},
	{9,1,2,3,4,5,6,7,0,8},

	};

	vectwod kernel = {
	{0,1,2,3,4},
	{1,2,3,4,5},
	{2,3,4,5,6},
	{3,4,5,6,7},
	{4,5,6,7,8},
	
	};
	
	
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vectwod imgPad(newHeight, vector<int>(newWidth));
	int cons = 4;
	
	for (int i=0 ; i<newHeight ; ++i) {
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[i][j] = cons;
			}
	}
	

	for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j] = image[i-kCenterY][j-kCenterX];
			}
	}

	
	for (int i=0 ; i<newHeight ; ++i) {
			for (int j=0 ; j<newWidth ; ++j) {
				cout<< imgPad[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}




#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;

int main()
{
	vectwod image = {
	{1,0,2,3,4,5,6,7,8,9},
	{1,2,3,4,5,6,7,8,9,8},
	{2,3,4,5,6,7,8,9,1,7},
	{3,4,5,6,7,8,9,1,2,6},
	{4,5,6,7,8,9,1,2,3,5},
	{5,6,7,8,9,1,2,3,4,4},
	{6,7,8,9,1,2,3,4,5,3},
	{7,8,9,1,2,3,4,5,6,2},
	{8,9,1,2,3,4,5,6,7,1},
	{9,1,2,3,4,5,6,7,0,8},

	};

	vectwod kernel = {
	{0,1,2,3,4},
	{1,2,3,4,5},
	{2,3,4,5,6},
	{3,4,5,6,7},
	{4,5,6,7,8},
	
	};
	
	
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vectwod imgPad(newHeight, vector<int>(newWidth));
	

	for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j] = image[i-kCenterY][j-kCenterX];
		}
	}
	
	for (int r=1 ; r<=kCenterY ; ++r) {
	
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[kCenterY-r][j] = imgPad[kCenterY+r+1][j];
				imgPad[imgHeight+kCenterY+r-1][j] = imgPad[imgHeight+kCenterY-r-1][j];
			}

			for (int i=0 ; i<newHeight ; ++i) {
				imgPad[i][kCenterX-r] = imgPad[i][kCenterX+r+1];
				imgPad[i][imgWidth+kCenterX+r-1] = imgPad[i][imgWidth+kCenterX-r-1];
			}
		
	}
	
	for (int i=0 ; i<newHeight ; ++i) {
			for (int j=0 ; j<newWidth ; ++j) {
				cout<< imgPad[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}






//Padding repeats periodically along the coordinate axes
#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;

int main()
{
	vectwod image = {
	{1,0,2,3,4,5,6,7,8,9},
	{1,2,3,4,5,6,7,8,9,8},
	{2,3,4,5,6,7,8,9,1,7},
	{3,4,5,6,7,8,9,1,2,6},
	{4,5,6,7,8,9,1,2,3,5},
	{5,6,7,8,9,1,2,3,4,4},
	{6,7,8,9,1,2,3,4,5,3},
	{7,8,9,1,2,3,4,5,6,2},
	{8,9,1,2,3,4,5,6,7,1},
	{9,1,2,3,4,5,6,7,0,8},

	};

	vectwod kernel = {
	{0,1,2,3,4},
	{1,2,3,4,5},
	{2,3,4,5,6},
	{3,4,5,6,7},
	{4,5,6,7,8},
	
	};
	
	
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vectwod imgPad(newHeight, vector<int>(newWidth));
	

	for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j] = image[i-kCenterY][j-kCenterX];
		}
	}
	
	for (int r=1 ; r<=kCenterY ; ++r) {
	
			for (int i=0 ; i<newHeight ; ++i) {
				imgPad[i][kCenterX-r] = imgPad[i][kCenterX+imgWidth-r];
				imgPad[i][imgWidth+kCenterX+r-1] = imgPad[i][kCenterX+r-1];
			}
			
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[kCenterY-r][j] = imgPad[kCenterY+imgHeight-r][j];
				imgPad[imgHeight+kCenterY+r-1][j] = imgPad[kCenterY+r-1][j];
			}
			
	}
	
	for (int i=0 ; i<newHeight ; ++i) {
		for (int j=0 ; j<newWidth ; ++j) {
				cout<< imgPad[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}





#include <iostream>
#include <vector>
#include <assert.h>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <stdio.h>

#include <fstream>
#include <string>
#include <sstream>

using namespace std;
using namespace cv;

typedef vector<vector<int>> vectwod;
typedef vector<vector<vector<int>>> vecthreed;


vecthreed convolve(vecthreed &image, vector<vector<float>> &kernel)
{
    
	//assert(image.size()!=0 && kernel.size()!=0);

	int height = image.size();
	int width = image[0].size();
	int channels = image[0][0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int newImageHeight = height - kernelHeight + 1;
	int newImageWidth = width - kernelWidth + 1;
	int d,i,j,h,w;
	int sum;
	
	int kCenterX = kernelHeight / 2;
	int kCenterY = kernelWidth / 2;

	vecthreed newImage(newImageHeight, vectwod(newImageWidth, vector<int>(channels)));
	
	cout<<"height = "<<height<<endl;
	cout<<"width = "<<width<<endl;
	cout<<"channels = "<<channels<<endl;
	cout<<"kernelHeight = "<<kernelHeight<<endl;
	cout<<"kernelWidth = "<<kernelWidth<<endl;
	cout<<"newImageHeight = "<<newImageHeight<<endl;
	cout<<"newImageWidth = "<<newImageWidth<<endl<<endl;

	for (d=0 ; d<channels ; ++d) {
		for (i=0 ; i<newImageHeight ; ++i) {
			for (j=0 ; j<newImageWidth ; ++j) {
				sum = 0;
				for (h=i ; h<i+kernelHeight ; ++h) {
					for (w=j ; w<j+kernelWidth ; ++w) {
						sum += kernel[h-i][w-j]*image[h][w][d];
					}
				}
				newImage[i][j][d] = sum;
			}
		}
	}

	return newImage;
}

/*vecthreed convolve(vecthreed &image, vectwod &kernel, int times)
{
	vecthreed newImage = image;
	
	for(int i=0 ; i<times ; i++) {
		newImage = applykernel(newImage, kernel);
	}
	
	return newImage;
}*/

vecthreed constPad(vecthreed &image,vector<vector<float>> &kernel,int cons)
{
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	int channels = image[0][0].size();
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vecthreed imgPad(newHeight, vectwod(newWidth, vector<int>(channels)));
	
	for (int d=0 ; d<channels ; ++d) {
		for (int i=0 ; i<newHeight ; ++i) {
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[i][j][d] = cons;
			}
		}
	}
	
	for (int d=0 ; d<channels ; ++d) {
		for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j][d] = image[i-kCenterY][j-kCenterX][d];
			}
		}
	}
	
	return imgPad;
	
}


vecthreed repPad(vecthreed &image,vector<vector<float>> &kernel)
{
	int imgHeight = image.size();
	int imgWidth = image[0].size();
	int kernelHeight = kernel.size();
	int kernelWidth = kernel[0].size();
	int kCenterY = kernelHeight / 2;
	int kCenterX = kernelWidth / 2;
	int channels = image[0][0].size();
	
	int newWidth = kCenterX*2 + imgWidth;
	int newHeight = kCenterY*2 + imgHeight;
	
	vecthreed imgPad(newHeight, vectwod(newWidth, vector<int>(channels)));
	
	for (int d=0 ; d<channels ; ++d) {
		for (int i=kCenterY ; i<kCenterY + imgHeight ; ++i) {
			for (int j=kCenterX ; j<kCenterX + imgWidth ; ++j) {
				imgPad[i][j][d] = image[i-kCenterY][j-kCenterX][d];
			}
		}
	}
	
	for (int r=1 ; r<=kCenterY ; ++r) {
		for (int d=0 ; d<channels ; ++d) {
			for (int j=0 ; j<newWidth ; ++j) {
				imgPad[kCenterY-r][j] = imgPad[kCenterY-r+1][j];
				imgPad[imgHeight+kCenterY+r-1][j] = imgPad[imgHeight+kCenterY+r-2][j];
			}

			for (int i=0 ; i<newHeight ; ++i) {
				imgPad[i][kCenterX-r] = imgPad[i][kCenterX-r+1];
				imgPad[i][imgWidth+kCenterX+r-1] = imgPad[i][imgWidth+kCenterX+r-2];
			}
			
		}
	}
	
	return imgPad;
}

int main(int argc, char** argv)
{

	if (argc != 5) {
		printf("Formato: ./ImgConv <Image_Path> <Kernel_Path> <Padding_type> <ImageOut_Path>\n");
		return -1;
	}
	
	Mat image;
	string fname;

	image = imread(argv[1], 1);
	
	if (!image.data) {
		printf("No se puede abrir el archivo de imagen\n");
		return -1;
	}
	
	vecthreed mchannel(image.rows, vectwod(image.cols, vector<int>(image.channels())));
	
	for (int i = 0; i < image.rows; i++) {
		for (int j = 0; j < image.cols; j++) {
			Vec3b intensity = image.at<Vec3b>(i, j);
			for(int k = 0; k < image.channels(); k++) {
				mchannel[i][j][k] = intensity.val[k];
			}
			//cout<<mchannel[i][j][0]<<" ";
		}
		//cout<<endl<<endl;
	}

	fstream file (argv[2], ios::in);

	vector<vector<float>> kernell;
	vector<float> row;
	string line, word;

	if(file.is_open())
	{
		while(getline(file, line))
		{
		row.clear();

		stringstream str(line);

			while(getline(str, word, ','))
			row.push_back(stof(word.c_str()));
			
			kernell.push_back(row);
		}
	}
	else
	printf("No se puede abrir el archivo de kernel\n");

	/*for(int i=0;i<kernell.size();i++)
	{
		for(int j=0;j<kernell[i].size();j++)
		{
			cout<<kernell[i][j]<<" ";
		}
		cout<<"\n";
	}*/
	
	string padding=argv[3];
	
	if(padding=="c"){
	
		int cons;
		cout<<"Ingrese el valor de la constante: ";
		cin>>cons;
		
		newImgPad = constPad(mchannel,kernell,cons);
	}
	else if(padding=="p"){
	
		newImgPad = repPad(mchannel,kernell);
		
	}
	else{
		cout<<"M√©todo de padding no v√°lido."<<endl;
		return -1;
	}
	
	/*
	cout<<newImgPad.size()<<endl;
	cout<<newImgPad[0].size()<<endl;
	cout<<newImgPad[0][0].size()<<endl;
	*/
	vecthreed newChnImg = convolve(newImgPad,kernell);
	
	Mat newImage(newChnImg.size(),newChnImg[0].size(),image.type());
	Vec3b newIntensity;
	
	//cout<<"New matrix size: "<<newChnImg.size()<<" x "<<newChnImg[0].size()<<" x "<<newChnImg[0][0].size()<<endl;
	
	for (int i = 0; i < newChnImg.size(); i++) {
		for (int j = 0; j < newChnImg[0].size(); j++) {;
			for(int k = 0; k < newChnImg[0][0].size(); k++) {
				newIntensity.val[k] = newChnImg[i][j][k];
			}
			newImage.at<Vec3b>(i, j) = newIntensity;
			//cout<<newImage.at<Vec3b>(i, j)<<endl;
		}
	}
	
	cout<<"New image size: "<<newImage.rows<<" x "<<newImage.cols<<" x "<<newImage.channels()<<endl<<endl;
	
	string imageName = argv[4];
	
	imwrite(imageName, newImage);
	
	namedWindow("Display Image", WINDOW_AUTOSIZE);
	imshow("Display Image", newImage);
	waitKey(0);
	return 0;
}
